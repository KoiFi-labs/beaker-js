import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import algosdk from 'algosdk'
// import { HelloBeaker } from '../src/hellobeaker_client'
import * as bkr from 'beaker-ts'
// import { APIProvider, Network, getAlgodClient } from 'beaker-ts/lib/clients'
// import { PlaceHolderSigner } from 'beaker-ts/lib/web'
import { useState, useEffect } from 'react'

export default function Home() {

    const [appId, setAppId] = useState<number>(0);
    // Setup config for client/network.
    const [apiProvider, setApiProvider] = useState(bkr.clients.APIProvider.Sandbox);
    const [network, setNetwork] = useState(bkr.clients.Network.SandNet);
    // Init our algod client
    const algodClient = bkr.clients.getAlgodClient(apiProvider, network);
    
    const [signer, setSigner] = useState<algosdk.TransactionSigner>(bkr.web.PlaceHolderSigner)
    // Set up user wallet from sandbox
    const [acct, setAcct] = useState<any>(null)

    const [loading, setLoading] = useState(false);

    console.log(signer)

    // const AnonClient = (client: algosdk.Algodv2, signer: algosdk.TransactionSigner, appId: number): HelloBeaker => {
    //     return new HelloBeaker({
    //       client: client,
    //       signer: signer,
    //       sender: "",
    //       appId: appId,
    //     });
    //   };

    // // Init our app client
    // const [appClient, setAppClient] = useState<HelloBeaker>(
    //     AnonClient(algodClient, signer, appId)
    // );

    // If the account info, client, or app id change
    // update our app client
    useEffect(() => {
        console.log("hi");
        // setSigner(bkr.web.PlaceHolderSigner)
        // Bad way to track connected status but...
        // if (acct === null) { bkr.sandbox.getAccounts().then(accts => setAcct(accts.pop())) }
        // if (acct === null && appClient.sender !== "") {
        // setAppClient(AnonClient(algodClient, appId));
        // } else if (
        // acct !== null &&
        // acct.addr != appClient.sender
        // ) {
        // setAppClient(
        //     new HelloBeaker({
        //     client: algodClient,
        //     signer: acct.signer,
        //     sender: acct.addr,
        //     appId: appId,
        //     })
        // );
        // }
    }, [acct, appId, algodClient]);

    // // Deploy the app on chain
    // async function createApp() {
    //     setLoading(true);
    //     const { appId } = await appClient.create();
    //     setAppId(appId);
    //     alert(`Created app: ${appId}`);
    //     setLoading(false);
    // }

    return (
        <div className={styles.container}>
        <Head>
            <title>Algorand Beaker App Template with NextJS</title>
            <meta name="description" content="Generated by create next app" />
        </Head>

        <main className={styles.main}>
            <h1 className={styles.title}>
            KoiFi Protocol
            </h1>

            <p className={styles.description}>
            Let's test an app call to a local network{' '}
            <code className={styles.code}>Hello Beaker</code>
            </p>

            <button> <h2> Deploy App </h2> </button>

        </main>

        <footer className={styles.footer}>
            <a
            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
            >
            Powered by{' '}
            <span className={styles.logo}>
                <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
            </span>
            </a>
        </footer>
        </div>
    )
}
