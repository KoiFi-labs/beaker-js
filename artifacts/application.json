{
    "hints": {},
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMQpieXRlY2Jsb2NrIDB4NmQ2ZjZlNzM3NDY1NzI0ODY1NjE2Yzc0NjggMHg3MDZjNjE3OTY1NzI0NDYxNmQ2MTY3NjUgMHg2NDYxNmQ2MTY3NjUgMHg2ZDc2NzAgMHg2ZDYxNzg0NDYxNmQ2MTY3NjUKdHhuIE51bUFwcEFyZ3MKaW50Y18wIC8vIDAKPT0KYm56IG1haW5fbDgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg3N2IwOGZhNyAvLyAiaW5pdGlhbGl6ZV9oZWFsdGgodWludDY0KXZvaWQiCj09CmJueiBtYWluX2w3CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MzI2NjgxYzUgLy8gImF0dGFja3NfdGhlX21vbnN0ZXIoKXZvaWQiCj09CmJueiBtYWluX2w2CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4OTc4OWIwM2UgLy8gInJld2FyZF9wbGF5ZXIoKXZvaWQiCj09CmJueiBtYWluX2w1CmVycgptYWluX2w1Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIHJld2FyZHBsYXllcl82CmludGNfMSAvLyAxCnJldHVybgptYWluX2w2Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydApjYWxsc3ViIGF0dGFja3N0aGVtb25zdGVyXzUKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDc6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKYnRvaQpjYWxsc3ViIGluaXRpYWxpemVoZWFsdGhfNAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sODoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQpibnogbWFpbl9sMTIKdHhuIE9uQ29tcGxldGlvbgppbnRjXzEgLy8gT3B0SW4KPT0KYm56IG1haW5fbDExCmVycgptYWluX2wxMToKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KYXNzZXJ0CmNhbGxzdWIgb3B0aW5fMQppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTI6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCj09CmFzc2VydApjYWxsc3ViIGNyZWF0ZV8wCmludGNfMSAvLyAxCnJldHVybgoKLy8gY3JlYXRlCmNyZWF0ZV8wOgpieXRlY18wIC8vICJtb25zdGVySGVhbHRoIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApieXRlY18zIC8vICJtdnAiCnB1c2hieXRlcyAweCAvLyAiIgphcHBfZ2xvYmFsX3B1dAppbnRjXzAgLy8gMApieXRlY18xIC8vICJwbGF5ZXJEYW1hZ2UiCmFwcF9nbG9iYWxfZ2V0X2V4CnN0b3JlIDEKc3RvcmUgMApsb2FkIDEKIQphc3NlcnQKYnl0ZWNfMSAvLyAicGxheWVyRGFtYWdlIgpwdXNoaW50IDIgLy8gMgphcHBfZ2xvYmFsX3B1dApieXRlYyA0IC8vICJtYXhEYW1hZ2UiCmludGNfMCAvLyAwCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gb3B0X2luCm9wdGluXzE6CnR4biBTZW5kZXIKYnl0ZWNfMiAvLyAiZGFtYWdlIgppbnRjXzAgLy8gMAphcHBfbG9jYWxfcHV0CnJldHN1YgoKLy8gYXV0aF9vbmx5CmF1dGhvbmx5XzI6Cmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQpyZXRzdWIKCi8vIGF1dGhfb25seQphdXRob25seV8zOgpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKPT0KcmV0c3ViCgovLyBpbml0aWFsaXplX2hlYWx0aAppbml0aWFsaXplaGVhbHRoXzQ6CnN0b3JlIDIKdHhuIFNlbmRlcgpjYWxsc3ViIGF1dGhvbmx5XzIKLy8gdW5hdXRob3JpemVkCmFzc2VydApieXRlY18wIC8vICJtb25zdGVySGVhbHRoIgpsb2FkIDIKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBhdHRhY2tzX3RoZV9tb25zdGVyCmF0dGFja3N0aGVtb25zdGVyXzU6CmJ5dGVjXzAgLy8gIm1vbnN0ZXJIZWFsdGgiCmFwcF9nbG9iYWxfZ2V0CmludGNfMCAvLyAwCj4KYXNzZXJ0CmJ5dGVjXzEgLy8gInBsYXllckRhbWFnZSIKYXBwX2dsb2JhbF9nZXQKYnl0ZWNfMCAvLyAibW9uc3RlckhlYWx0aCIKYXBwX2dsb2JhbF9nZXQKPgpibnogYXR0YWNrc3RoZW1vbnN0ZXJfNV9sNApieXRlY18wIC8vICJtb25zdGVySGVhbHRoIgpieXRlY18wIC8vICJtb25zdGVySGVhbHRoIgphcHBfZ2xvYmFsX2dldApieXRlY18xIC8vICJwbGF5ZXJEYW1hZ2UiCmFwcF9nbG9iYWxfZ2V0Ci0KYXBwX2dsb2JhbF9wdXQKYXR0YWNrc3RoZW1vbnN0ZXJfNV9sMjoKdHhuIFNlbmRlcgpieXRlY18yIC8vICJkYW1hZ2UiCmFwcF9sb2NhbF9nZXQKYnl0ZWNfMSAvLyAicGxheWVyRGFtYWdlIgphcHBfZ2xvYmFsX2dldAorCmJ5dGVjIDQgLy8gIm1heERhbWFnZSIKYXBwX2dsb2JhbF9nZXQKPgpieiBhdHRhY2tzdGhlbW9uc3Rlcl81X2w1CmJ5dGVjXzMgLy8gIm12cCIKdHhuIFNlbmRlcgphcHBfZ2xvYmFsX3B1dApieXRlYyA0IC8vICJtYXhEYW1hZ2UiCnR4biBTZW5kZXIKYnl0ZWNfMiAvLyAiZGFtYWdlIgphcHBfbG9jYWxfZ2V0CmJ5dGVjXzEgLy8gInBsYXllckRhbWFnZSIKYXBwX2dsb2JhbF9nZXQKKwphcHBfZ2xvYmFsX3B1dApiIGF0dGFja3N0aGVtb25zdGVyXzVfbDUKYXR0YWNrc3RoZW1vbnN0ZXJfNV9sNDoKYnl0ZWNfMCAvLyAibW9uc3RlckhlYWx0aCIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKYiBhdHRhY2tzdGhlbW9uc3Rlcl81X2wyCmF0dGFja3N0aGVtb25zdGVyXzVfbDU6CnR4biBTZW5kZXIKYnl0ZWNfMiAvLyAiZGFtYWdlIgp0eG4gU2VuZGVyCmJ5dGVjXzIgLy8gImRhbWFnZSIKYXBwX2xvY2FsX2dldApieXRlY18xIC8vICJwbGF5ZXJEYW1hZ2UiCmFwcF9nbG9iYWxfZ2V0CisKYXBwX2xvY2FsX3B1dAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIHJld2FyZF9wbGF5ZXIKcmV3YXJkcGxheWVyXzY6CnR4biBTZW5kZXIKY2FsbHN1YiBhdXRob25seV8zCi8vIHVuYXV0aG9yaXplZAphc3NlcnQKYnl0ZWNfMCAvLyAibW9uc3RlckhlYWx0aCIKYXBwX2dsb2JhbF9nZXQKaW50Y18wIC8vIDAKPD0KYXNzZXJ0CnR4bmEgQWNjb3VudHMgMQpieXRlY18zIC8vICJtdnAiCmFwcF9nbG9iYWxfZ2V0Cj09CmFzc2VydAppdHhuX2JlZ2luCmludGNfMSAvLyBwYXkKaXR4bl9maWVsZCBUeXBlRW51bQp0eG5hIEFjY291bnRzIDEKaXR4bl9maWVsZCBSZWNlaXZlcgpwdXNoaW50IDEwMDAwMDAgLy8gMTAwMDAwMAppdHhuX2ZpZWxkIEFtb3VudAppdHhuX3N1Ym1pdAppbnRjXzEgLy8gMQpyZXR1cm4=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "schema": {
        "local": {
            "declared": {
                "damage": {
                    "type": "uint64",
                    "key": "damage",
                    "descr": "damage that will be apply to monster"
                }
            },
            "reserved": {}
        },
        "global": {
            "declared": {
                "monsterHealth": {
                    "type": "uint64",
                    "key": "monsterHealth",
                    "descr": "initial moster health"
                },
                "mvp": {
                    "type": "bytes",
                    "key": "mvp",
                    "descr": "player who did the most damage"
                },
                "playerDamage": {
                    "type": "uint64",
                    "key": "playerDamage",
                    "descr": "Random number representing the damage each player will deal"
                },
                "maxDamage": {
                    "type": "uint64",
                    "key": "maxDamage",
                    "descr": "highest amount of damage dealt to monster"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "GameApproval",
        "methods": [
            {
                "name": "initialize_health",
                "args": [
                    {
                        "type": "uint64",
                        "name": "health"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "attacks_the_monster",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "reward_player",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    }
}